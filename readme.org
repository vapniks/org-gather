* Plan
** Overview
The general idea is to have functions for gathering data from various places and then displaying it in an org table or tree.
The rows/headers of the output table/tree correspond to different items, and the columns/properties correspond to different
pieces of data for each item. 
The code is split into two tasks: gathering data and displaying data. These are explained below.
** Gathering functions
These functions take 2 arguments:
 1) a list of items or a single item from which to gather the data
 2) a list specifying column/property names and how to obtain the corresponding values. Details below.
there may also be other arguments (see the function descriptions below).

Return value: a list of lists which can be used by the display functions for displaying the data.
Each list in the output should contain the values for the corresponding table row or header. 
*** org-gather-from-buffers
Arguments:
 1) List of buffers
 2) alist whose keys are names of properties/columns, and whose values are sexps to be evaluated in the buffer
    and which return the associated string value or nil if no
    appropriate value could be found
 3) an optional argument which can take these values & meanings:
    - nil : default value, move to next buffer when all properties have been processed
    - number N : in each buffer loop over properties N times (so that each buffer produces N output lists)
    - anything else : in each buffer loop over properties repeatedly until a nil value is returned for one of the properties,
                      or point-max is reached in buffer
*** org-gather-from-single-buffer
This works like org-gather-from-buffers with a single buffer and the
3rd argument set to t. Arguments:
 1) List of buffers
 2) alist whose keys are names of properties/columns, and whose values are sexps to be evaluated in the buffer
    and which return the associated string value or nil if no
    appropriate value could be found
 3) an optional argument which can take these values & meanings:
    - nil : default value, loop over properties repeatedly until a nil value is returned for one of the properties, 
            or point-max is reached in buffer
    - number N : loop over properties N times (so that each buffer produces N output lists)
    - anything else : error
*** org-gather-from-comint-outputs
This works like org-gather-from-buffers but using succesive comint
output regions of the current buffer instead (starting with the output
region following point). Arguments:
 1) alist whose keys are names of properties/columns, and whose values are sexps to be evaluated in the buffer
    and which return the associated string value or nil if no
    appropriate value could be found
 2) number indicating how many succesive comint output regions to process

This could work by putting the output regions into hidden buffers, and
calling org-gather-from-buffers
*** org-gather-from-gnus-articles
Use `gnus-summary-ext-iterate-articles-safely' to loop over articles
corresponding to list of article numbers. Otherwise works the same as
`org-gather-from-buffers', and has the same arguments.
*** org-gather-from-list
Apply functions to each item in list in order to get values.
Arguments:
 1) List of items
 2) alist whose keys are names of properties/columns, and whose values are functions of 1 argument. 
    Each function takes an item from the list and returns a string.
*** org-gather-from-files
Application of `org-gather-from-buffers'.
*** org-gather-from-urls
AAltered items: Argumentspplication of `org-gather-from-files'
** Displaying functions
Each of these functions should take 2 arguments:
 1) a list of column/property names
 2) a list of value lists. Each value list contains the column/property values for a row/header in the same order
   as the 1st argument. In the case of `org-gather-create-tree' there
    will be an extra first element in each list which is the title of
    the header.
*** org-gather-create-table
I have already written this function.
*** org-gather-create-tree
Given a list of property names and a list of value lists create org
headers for each list with appropriate names & properties.
** misc
*** org-gather-items
This should be a user option containing alists for different sets of
items. Each alist will be a list of (NAME . VALUE) pairs where NAME is
the name of the property/column, and VALUE defines how to obtain the
value of the property/column. VALUE could be a function, a regular
expression, or a list indicating a region/rectangle. This will allow
the user to save data gathering methods for reuse. Each of the alists
should also have an associated name (user specified), which can be
passed to either `org-gather-into-property-tree' or
`org-gather-into-table' to indicate which stored method to use.


* update
(progn (vc-checkin '("~/programming_projects/org-gather/readme.org") 
 Altered items: Arguments 'Git nil "update") (magit-push))
