* Plan
** Overview
The general idea is to have functions for gathering data from various places and then displaying it in an org table or tree.
The rows/headers of the output table/tree correspond to different items, and the columns/properties correspond to different
pieces of data for each item. 
The code is split into two tasks: gathering data and displaying data. These are explained below.
I have given priorities to the functions with [#A] being most important, and [#D] being least important for now.
** Gathering functions
These functions take 2 arguments:
 1) a list of items or a single item from which to gather the data
 2) alist whose keys are names of properties/columns, and whose values are sexps or functions which return
    the associated string value or nil if no appropriate value could be found. 
    The keys OG-TITLE and OG-CONTENTS will not be treated as properties, and instead will be used by `org-gather-create-tree'
    for the title and contents of branches.

there may also be other arguments (see the function descriptions below).

Return value: a list of lists which can be used by the display functions for displaying the data.
Each list in the output should contain the values for the corresponding table row or header. 
*** [#A] org-gather-from-single-buffer
Arguments:
 1) A buffer or buffer name
 2) alist whose keys are names of properties/columns, and whose values are sexps to be evaluated in the buffer
    and which return the associated string value or nil if no appropriate value could be found
 3) an optional argument which can take these values & meanings:
    - nil : default value, loop over properties repeatedly until a nil value is returned for one of the properties, 
            or point-max is reached in buffer
    - number N : loop over properties N times (so that N output lists are returned)
    - anything else : error
*** [#B] org-gather-from-buffers
Application of `org-gather-from-single-buffer' - just loop over list of buffers
Arguments:
 1) List of buffers
 2) alist whose keys are names of properties/columns, and whose values are sexps to be evaluated in the buffer
    and which return the associated string value or nil if no appropriate value could be found
 3) an optional argument which can take these values & meanings:
    - nil : default value, move to next buffer when all properties have been processed once each
    - number N : in each buffer loop over properties N times (so that each buffer produces N output lists)
    - anything else : in each buffer loop over properties repeatedly until a nil value is returned for one of the properties,
                      or point-max is reached in buffer
*** [#B] org-gather-from-comint-outputs
This works like `org-gather-from-buffers' but using succesive comint output regions of the current buffer instead 
(starting with the output region following point). 
Arguments:
 1) alist whose keys are names of properties/columns, and whose values are sexps to be evaluated in the buffer
    and which return the associated string value or nil if no appropriate value could be found
 2) number indicating how many succesive comint output regions to process

This could work by putting the output regions into hidden buffers, and
calling org-gather-from-buffers
*** [#D] org-gather-from-gnus-articles
Use `gnus-summary-ext-iterate-articles-safely' to loop over articles corresponding to list of article numbers. 
Otherwise works the same as `org-gather-from-buffers', and has the same arguments.
I will write this function.
*** [#B] org-gather-from-list
Apply functions to each item in list in order to get values.
Arguments:
 1) List of items
 2) alist whose keys are names of properties/columns, and whose values are functions of 1 argument. 
    Each function takes an item from the list and returns a string.
*** [#C] org-gather-from-files
Application of `org-gather-from-buffers'.
*** [#D] org-gather-from-urls
Application of `org-gather-from-files'
** Displaying functions
Each of these functions should take at least 2 arguments:
 1) a list of column/property names. The elements OG-TITLE and OG-CONTENTS will be used by `org-gather-create-tree'
    to indicate the title and contents of each branch, but will be ignored by `org-gather-create-table'
 2) a list of value lists. Each value list contains the column/property values for a row/header in the same order
    as the 1st argument. 

*** [#D] org-gather-create-table
I will write this function.
*** [#A] org-gather-create-tree
Given a list of property names and a list of value lists create org headers for each list with appropriate names & properties.
The title of each header is given by the OG-TITLE property, and the contents (which come after properties) is given by the
OG-CONTENTS property.
*** [#D] org-gather-update-table
This function takes a third argument which is the name of an org table, as defined by the #+TBLNAME property.
It then updates the columns of the table according to the contents of the first 2 arguments.
It does not change any existing columns that are not listed in the first argument to the function.
I will write this function.
*** [#D] org-gather-update-tree
This function takes as input the 2 previously mentioned arguments.
It looks for headers in the current buffer matching the OG-TITLE property of the lists of the 2nd argument.
It then updates the information in those headers accordingly, without changing any properties that were not
given as an argument to the function. New headers will be created for any items of the 2nd argument that don't
have existing headers in the current buffer.
** User customizable options
*** org-gather-saved-functions
This should be a list of named functions that will be put in scope when gathering data.
I have already written the code for this option.
* update
(progn (vc-checkin '("~/programming_projects/org-gather/readme.org") 
  'Git nil "update") (magit-push))

